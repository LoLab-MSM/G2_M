"""An implementation of the model from:

Mathematical modeling and sensitivity analysis of G2/S phase in the cell cycle
involving the p53/Mdm2 oscillation system.  Yoshihiko Tashima, Yu Kisaka, 
Taizo Hanai, Hiroyuki Hamada, Yukihiro Eguchi, Masahiro Okamoto. 
Proc. Int. Fed. Med. Biomed. Eng., 14 (2006), pp. 195–198
doi:10.1016/j.biosystems.2008.05.016 "Update"

http://www.researchgate.net/publication/226126852_Mathematical_modeling_of_G2M_phase_in_the_cell_cycle_with_involving_the_p53Mdm2_oscillation_system

Implemented by: Corey Hayford
"""

#IMPORTANT: Some ODEs generated by this model need to be overridden. These 
#are located in "run_fan_model.py". "_source" needs to be set to the variable
#corresponding to the species "__source()"


from pysb import *
from pysb.util import *
#from macros import *
from pysb.macros import *

Model()

def set_dna_damage(damage):
    Parameter("DDS", damage)
    
    # "Make all model components visible as symbols in the caller's global namespace"
    #alias_model_components()

def dna_damage_monomers():
    """Declare the monomers in the Tashima model
    'state' is the binding state between the monomers
    'a' is the active conformation binding state
    'i' is the inactive conformation binding state
    'phos' is the phosphorylation state
    'u' is the unphosphorylated monomer
    'p' is the phosphorylated monomer
    'b' is the binding site between p## and other proteins"""
    
    #'Y' is the phosphorylation state
    
    #'c' is the binding site between cyclins and CDKs
    #'i' is the binding site for inhibitors
    
    # **Cyclins**
    #Monomer("CycD", [        'c'])
    #Monomer("CycE", [        'c'])
    #Monomer("CycA", [        'c'])
    
    # **Cyclin-dependent kinases**
    #Monomer("CDK46",['Y','b','c'], {'Y':['u','p']})
    #Monomer("CDK2",    ['Y','b','c'], {'Y':['u','p']})
    
    # **Regulatory proteins**
     
    Monomer("p53")
    Monomer("p21",     ['b'])
    
    Monomer("X14-3-3",  ['b'])
    Monomer("ATR",     ['b'])
    Monomer("Mdm2")
    Monomer("I")
    
    Monomer('Cdc25', ['b', 'state', 'phos'], {'state':['i','a'], 'phos':['u','p']})
    Monomer('MPF' ,  ['b', 'state'      ], {'state':['i','a']                })
    Monomer('Wee1',  [       'phos'], {                 'phos':['u','p']})
    Monomer('Chk1',  [       'phos'], {                 'phos':['u','p']})
    #Monomer("p27",     [    'b'])
    
    #Monomer("p16",     [    'b'])
    #Monomer("p53",    [    'b'])
    #Monomer("Rb",     ['Y','b'], {'Y':['u','pp','pppp']})
    #Monomer("E2F",     [    'b'])
    
    #Monomer("X")
    
    
    alias_model_components()

def declare_initial_conditions():
    Parameter("X1", 1.0e-6)    # Chk1p
    Parameter("X1pre", 0.9999999)    #Chk1
    Parameter("X2", 0.2)    #ATR
    Parameter("X3", 0.0265)    #p53
    Parameter("X4", 1.0e-6)    #preMPF
    Parameter("X5", 1.0e-8)    #MPF
    Parameter("X6", 0.0)    #p21
    Parameter("X7", 0.0)    #p21/MPF
    Parameter("X8", 1.0e-6)    #iCdc25
    Parameter("X9", 2.0e-5)    #iCdc25Ps216
    Parameter("X10", 0.03)    #iCdc25Ps216/14-3-3
    Parameter("X11", 1.0e-6)    #aCdc25
    Parameter("X12", 0.0)    #aCdc25Ps216
    Parameter("Y13", 1.00e-04)    #     p27/CycA/CDK2 (-P)
    Parameter("X14", 0.001)    #Wee1
    Parameter("X15", 0.0)    #Wee1p
    Parameter("X16", 2.35e-4)    #Mdm2
    Parameter("X17", 0.0)    #I(Intermediate)
    Parameter("DDS(on)", 0.005)    #DDS(on)
    Parameter("DDS(off)", 0.0)    #DDS(off)
    
    alias_model_components()
    
    Initial(Chk1p(phos='p'), X1)    #0
    Initial(Chk1(phos='u'), X1pre)    #1
    Initial(ATR(b=None), X2)    #2
    Initial(p53, X3)    #3
    #Initial(preMPF(state='i', b=None), X4)    #4
    #Initial(MPF(state='a', b=None), X5)    #5
    Initial(p21(b=None), X6)    #6
    Initial(p21(b=None) % MPF(b=None, state='a'), X7)    #7
    Initial(iCdc25(state='i'), X8)    #8
    Initial(iCdc25Ps216(state='i', phos='p'), X9)    #9
    Initial(p27(b=None), Y10)    #10
    Initial(CycD(c=2) % CDK46(Y='p',b=1,c=2) % p27(b=1), Y11)    #11
    Initial(CycE(c=2) % CDK2(Y='p',b=1,c=2) % p27(b=1), Y12)    #12
    Initial(CycA(c=2) % CDK2(Y='p',b=1,c=2) % p27(b=1), Y13)    #13
    Initial(p21(b=None), Y14)    #14
    Initial(CycD(c=2) % CDK46(Y='p',b=1,c=2) % p21(b=1), Y15)    #15
    Initial(CycE(c=2) % CDK2(Y='p',b=1,c=2) % p21(b=1), Y16)    #16
    Initial(CycA(c=2) % CDK2(Y='p',b=1,c=2) % p21(b=1), Y17)    #17
    Initial(p16(b=None), Y18)    #18
    Initial(Rb(b=1,Y='u') % E2F(b=1), Y19)    #19
    Initial(Rb(b=1,Y='pp') % E2F(b=1), Y20)    #20
    Initial(E2F(b=None), Y21)    #21
    Initial(Rb(b=None,Y='pppp'), Y22)    #22
    Initial(Rb(b=None,Y='u'), Y23)    #23
    Initial(p53(b=None), Y24)    #24
    Initial(Mdm2(i=None), Y25)    #25
    Initial(X(), Y26)    #26
    Initial(I(), Y27)    #27

def declare_kinetic_parameters():
    ##### Table 1 #####
    # Kinetic parameters of proposed model
    Parameter("k1", 0.2)    #
    Parameter("k2", 1.0)    #
    Parameter("k3", 1.0)    # 
    Parameter("k-3", 1.0)    # 
    Parameter("k4", 0.01)    # 
    Parameter("k-4", 0.01)    #
    Parameter("k5", 1.0)    #
    Parameter("k-5", 0.01)    #
    Parameter("k6", 1.0)    #
    Parameter("k-6", 0.01)    #
    Parameter("k7", 0.01)    #
    Parameter("k8", 100.0)    #
    Parameter("k9", 0.005)    #
    Parameter("k10", 1.0)    #
    Parameter("k-10", 1.0)    #
    Parameter("k11", 0.1)    #
    Parameter("k-11", 1.0)    #
    Parameter("k12", 0.01)    #
    Parameter("k13", 1.0)    #
    Parameter("k14", 0.01)    #
    Parameter("k15", 0.1)    #
    Parameter("k16", 2.0e-4)    #
    Parameter("k17", 0.1)    #
    Parameter("k-17", 1.0)    # 
    Parameter("k18", 1.0)    #
    Parameter("k19", 1.0)    #
    Parameter("k20", 1.0)    #
    Parameter("k21", 0.01)    #
    Parameter("k22", 0.00094)    #
    Parameter("k23", 0.02)    # 
    Parameter("k24", 10.0)    #
    Parameter("k25", 0.005)    #
    Parameter("k26", 0.004)    #
    Parameter("k27", 6.0)    #
    Parameter("k28", 0.0001)    # 
    Parameter("k30", 0.001)    # 
    Parameter("k31", 1.0)    #
    Parameter("k32", 0.0001)    #
    Parameter("k33", 1.0e8)    #
    Parameter("k34", 1.5)    #
    Parameter("k(ex)", 1.0)    #
    Parameter("v(in)", 1.0e-5)    #
    Parameter("k(m)", 9.5)    #
    Parameter("n", 9.0)    #
    Parameter("k(damp)", 0.02)    #
    Parameter("k(deg)", 0.772)    #
    Parameter("Deg(0)", 0.0566)    #

    
    alias_model_components()
